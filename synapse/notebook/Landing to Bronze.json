{
	"name": "Landing to Bronze",
	"properties": {
		"folder": {
			"name": "Raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkPool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "acefae51-d90f-481a-a03f-599c90e3f344"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/185481f0-122c-4562-9ceb-b8d01ca04f14/resourceGroups/devrgpmeshpolice/providers/Microsoft.Synapse/workspaces/devsynmeshpolice/bigDataPools/sparkPool01",
				"name": "sparkPool01",
				"type": "Spark",
				"endpoint": "https://devsynmeshpolice.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkPool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import json\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"sourcePath = \"forces\"\r\n",
					"destPath = \"forces\"\r\n",
					"fileFormat = \"json\""
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def GetSecretValue(secretName: str):\r\n",
					"    return mssparkutils.credentials.getSecretWithLS(\"lsDomainKeyvault\", secretName)"
				],
				"execution_count": 90
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storageAccountName = GetSecretValue(\"storageaccount-name\")\r\n",
					"sourceContainer = \"landing\"\r\n",
					"sourceUri = f\"abfss://{sourceContainer}@{storageAccountName}.dfs.core.windows.net\"\r\n",
					"sourceDataPath = f\"{sourceUri}/{sourcePath}\"\r\n",
					"print(sourceDataPath)"
				],
				"execution_count": 91
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fileList = []"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def ListFiles(filePath: str):\r\n",
					"    items = mssparkutils.fs.ls(filePath)\r\n",
					"\r\n",
					"    for item in items:\r\n",
					"    \r\n",
					"        itemName = item.name\r\n",
					"        itemPath = item.path\r\n",
					"        itemSize = item.size\r\n",
					"\r\n",
					"        if itemSize == 0:\r\n",
					"            ListFiles(itemPath)\r\n",
					"\r\n",
					"        if itemName.endswith(f\".{fileFormat}\"):\r\n",
					"            fileList.append(itemPath)"
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ListFiles(sourceDataPath)\r\n",
					"print(fileList)"
				],
				"execution_count": 94
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.format(\"json\").load(sourceDataPath)\r\n",
					"df = df.withColumn(\"_InputFileName\", expr(\"input_file_name()\"))\r\n",
					"df = df.withColumn(\"_InputFileDate\", expr(\"CAST(CONCAT_WS('-', Year, Month, Day) AS DATE)\"))\r\n",
					"#fileList = fileList[:-1]\r\n",
					"print(fileList)\r\n",
					"df = df.filter(col(\"_InputFileName\").isin(fileList))\r\n",
					"df = df.withColumn(\"_InputFileName\",  expr(f\"REPLACE(_InputFileName, '{sourceUri}/', '')\"))\r\n",
					"display(df)"
				],
				"execution_count": 95
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"destContainer = \"bronze\"\r\n",
					"destUri = f\"abfss://{destContainer}@{storageAccountName}.dfs.core.windows.net/{destPath}\"\r\n",
					"destDataPath = f\"{destUri}/_data\"\r\n",
					"destCheckpointPath = f\"{destUri}/_checkpoint\"\r\n",
					"print(destDataPath)"
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"(\r\n",
					"    df.write\r\n",
					"    .format(\"delta\")\r\n",
					"    .mode(\"append\")\r\n",
					"    .partitionBy(\"_InputFileDate\")\r\n",
					"    .save(destDataPath)\r\n",
					")"
				],
				"execution_count": 97
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"CREATE DATABASE IF NOT EXISTS {destContainer}\")\r\n",
					"spark.sql(f\"CREATE TABLE IF NOT EXISTS {destContainer}.{destPath} USING DELTA LOCATION '{destDataPath}'\")"
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dfTest = spark.sql(f\"SELECT * FROM {destContainer}.{destPath}\")\r\n",
					"display(dfTest)"
				],
				"execution_count": 99
			}
		]
	}
}